/* tslint:disable */
/* eslint-disable */
/**
 * Measurements API
 * API to fetch ruuvi tag measurements data.
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: tbd@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Filters for measurement items.
 * @export
 * @interface MeasurementFilter
 */
export interface MeasurementFilter {
    /**
     * Start time as defined by RFC 3339, section 5.6.
     * @type {Date}
     * @memberof MeasurementFilter
     */
    startTime?: Date | null;
    /**
     * End time as defined by RFC 3339, section 5.6.
     * @type {Date}
     * @memberof MeasurementFilter
     */
    endTime?: Date | null;
    /**
     * Measurement source identifier.
     * @type {string}
     * @memberof MeasurementFilter
     */
    source?: string | null;
    /**
     * Order results by column. Format is column_name:sort_direction.
     * @type {string}
     * @memberof MeasurementFilter
     */
    orderBy?: string;
    /**
     * Maximum number of results to return
     * @type {number}
     * @memberof MeasurementFilter
     */
    limit?: number;
    /**
     * Starting offset
     * @type {number}
     * @memberof MeasurementFilter
     */
    offset?: number;
}

/**
 * Check if a given object implements the MeasurementFilter interface.
 */
export function instanceOfMeasurementFilter(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function MeasurementFilterFromJSON(json: any): MeasurementFilter {
    return MeasurementFilterFromJSONTyped(json, false);
}

export function MeasurementFilterFromJSONTyped(json: any, ignoreDiscriminator: boolean): MeasurementFilter {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'startTime': !exists(json, 'startTime') ? undefined : (json['startTime'] === null ? null : new Date(json['startTime'])),
        'endTime': !exists(json, 'endTime') ? undefined : (json['endTime'] === null ? null : new Date(json['endTime'])),
        'source': !exists(json, 'source') ? undefined : json['source'],
        'orderBy': !exists(json, 'orderBy') ? undefined : json['orderBy'],
        'limit': !exists(json, 'limit') ? undefined : json['limit'],
        'offset': !exists(json, 'offset') ? undefined : json['offset'],
    };
}

export function MeasurementFilterToJSON(value?: MeasurementFilter | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'startTime': value.startTime === undefined ? undefined : (value.startTime === null ? null : value.startTime.toISOString()),
        'endTime': value.endTime === undefined ? undefined : (value.endTime === null ? null : value.endTime.toISOString()),
        'source': value.source,
        'orderBy': value.orderBy,
        'limit': value.limit,
        'offset': value.offset,
    };
}

