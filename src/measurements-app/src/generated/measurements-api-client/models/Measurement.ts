/* tslint:disable */
/* eslint-disable */
/**
 * Measurements API
 * API to fetch ruuvi tag measurements data.
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: tbd@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Acceleration } from './Acceleration';
import {
    AccelerationFromJSON,
    AccelerationFromJSONTyped,
    AccelerationToJSON,
} from './Acceleration';

/**
 * Measurement data from one source
 * @export
 * @interface Measurement
 */
export interface Measurement {
    /**
     * Measurement unique identifier. Generated on insert.
     * @type {string}
     * @memberof Measurement
     */
    id?: string;
    /**
     * Measurement time as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z
     * @type {Date}
     * @memberof Measurement
     */
    time?: Date;
    /**
     * Source of measurement. With ruuvi tag this is MAC.
     * @type {string}
     * @memberof Measurement
     */
    source?: string;
    /**
     * Temperature in celsius.
     * @type {number}
     * @memberof Measurement
     */
    temperature?: number;
    /**
     * Pressure
     * @type {number}
     * @memberof Measurement
     */
    pressure?: number;
    /**
     * Humidity
     * @type {number}
     * @memberof Measurement
     */
    humidity?: number;
    /**
     * Battery level. TBD what is the format.
     * @type {number}
     * @memberof Measurement
     */
    battery?: number;
    /**
     * 
     * @type {Acceleration}
     * @memberof Measurement
     */
    acceleration?: Acceleration;
}

/**
 * Check if a given object implements the Measurement interface.
 */
export function instanceOfMeasurement(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function MeasurementFromJSON(json: any): Measurement {
    return MeasurementFromJSONTyped(json, false);
}

export function MeasurementFromJSONTyped(json: any, ignoreDiscriminator: boolean): Measurement {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'time': !exists(json, 'time') ? undefined : (new Date(json['time'])),
        'source': !exists(json, 'source') ? undefined : json['source'],
        'temperature': !exists(json, 'temperature') ? undefined : json['temperature'],
        'pressure': !exists(json, 'pressure') ? undefined : json['pressure'],
        'humidity': !exists(json, 'humidity') ? undefined : json['humidity'],
        'battery': !exists(json, 'battery') ? undefined : json['battery'],
        'acceleration': !exists(json, 'acceleration') ? undefined : AccelerationFromJSON(json['acceleration']),
    };
}

export function MeasurementToJSON(value?: Measurement | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'time': value.time === undefined ? undefined : (value.time.toISOString()),
        'source': value.source,
        'temperature': value.temperature,
        'pressure': value.pressure,
        'humidity': value.humidity,
        'battery': value.battery,
        'acceleration': AccelerationToJSON(value.acceleration),
    };
}

