/* tslint:disable */
/* eslint-disable */
/**
 * Measurements API
 * API to fetch ruuvi tag measurements data.
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: tbd@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Measurement } from './Measurement';
import {
    MeasurementFromJSON,
    MeasurementFromJSONTyped,
    MeasurementToJSON,
} from './Measurement';

/**
 * Response object for measurements.
 * @export
 * @interface MeasurementsDataResponse
 */
export interface MeasurementsDataResponse {
    /**
     * Count of items returned.
     * @type {number}
     * @memberof MeasurementsDataResponse
     */
    count?: number;
    /**
     * Total number of items.
     * @type {number}
     * @memberof MeasurementsDataResponse
     */
    total?: number;
    /**
     * 
     * @type {Array<Measurement>}
     * @memberof MeasurementsDataResponse
     */
    items?: Array<Measurement>;
}

/**
 * Check if a given object implements the MeasurementsDataResponse interface.
 */
export function instanceOfMeasurementsDataResponse(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function MeasurementsDataResponseFromJSON(json: any): MeasurementsDataResponse {
    return MeasurementsDataResponseFromJSONTyped(json, false);
}

export function MeasurementsDataResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): MeasurementsDataResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'count': !exists(json, 'count') ? undefined : json['count'],
        'total': !exists(json, 'total') ? undefined : json['total'],
        'items': !exists(json, 'items') ? undefined : ((json['items'] as Array<any>).map(MeasurementFromJSON)),
    };
}

export function MeasurementsDataResponseToJSON(value?: MeasurementsDataResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'count': value.count,
        'total': value.total,
        'items': value.items === undefined ? undefined : ((value.items as Array<any>).map(MeasurementToJSON)),
    };
}

