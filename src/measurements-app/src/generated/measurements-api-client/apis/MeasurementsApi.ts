/* tslint:disable */
/* eslint-disable */
/**
 * Measurements API
 * API to fetch ruuvi tag measurements data.
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: tbd@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Measurement,
  MeasurementsDataResponse,
  ProblemDetails,
  ValidationProblemDetails,
} from '../models';
import {
    MeasurementFromJSON,
    MeasurementToJSON,
    MeasurementsDataResponseFromJSON,
    MeasurementsDataResponseToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    ValidationProblemDetailsFromJSON,
    ValidationProblemDetailsToJSON,
} from '../models';

export interface GetMeasurementsRequest {
    startTime?: Date | null;
    endTime?: Date | null;
    source?: string | null;
    orderBy?: string;
    limit?: number;
    offset?: number;
}

export interface PostMeasurementsRequest {
    measurement: Array<Measurement>;
}

/**
 * 
 */
export class MeasurementsApi extends runtime.BaseAPI {

    /**
     * Return measurement data for selected time period.
     */
    async getMeasurementsRaw(requestParameters: GetMeasurementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MeasurementsDataResponse>> {
        const queryParameters: any = {};

        if (requestParameters.startTime !== undefined) {
            queryParameters['startTime'] = (requestParameters.startTime as any).toISOString();
        }

        if (requestParameters.endTime !== undefined) {
            queryParameters['endTime'] = (requestParameters.endTime as any).toISOString();
        }

        if (requestParameters.source !== undefined) {
            queryParameters['source'] = requestParameters.source;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/measurements`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MeasurementsDataResponseFromJSON(jsonValue));
    }

    /**
     * Return measurement data for selected time period.
     */
    async getMeasurements(requestParameters: GetMeasurementsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MeasurementsDataResponse> {
        const response = await this.getMeasurementsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create multiple measurements.
     */
    async postMeasurementsRaw(requestParameters: PostMeasurementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.measurement === null || requestParameters.measurement === undefined) {
            throw new runtime.RequiredError('measurement','Required parameter requestParameters.measurement was null or undefined when calling postMeasurements.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/measurements/batch-insert`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.measurement.map(MeasurementToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create multiple measurements.
     */
    async postMeasurements(requestParameters: PostMeasurementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postMeasurementsRaw(requestParameters, initOverrides);
    }

}
