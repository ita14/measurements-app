# coding: utf-8

"""
    Measurements API

    API to fetch ruuvi tag measurements data.  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Contact: tbd@example.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from measurements_api_client import schemas  # noqa: F401


class Measurement(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Measurement data from one source
    """


    class MetaOapg:
        
        class properties:
            id = schemas.StrSchema
            time = schemas.DateTimeSchema
            source = schemas.StrSchema
            temperature = schemas.Float64Schema
            pressure = schemas.Float64Schema
            humidity = schemas.Float64Schema
            battery = schemas.Float64Schema
        
            @staticmethod
            def acceleration() -> typing.Type['Acceleration']:
                return Acceleration
            __annotations__ = {
                "id": id,
                "time": time,
                "source": source,
                "temperature": temperature,
                "pressure": pressure,
                "humidity": humidity,
                "battery": battery,
                "acceleration": acceleration,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["time"]) -> MetaOapg.properties.time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["source"]) -> MetaOapg.properties.source: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["temperature"]) -> MetaOapg.properties.temperature: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pressure"]) -> MetaOapg.properties.pressure: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["humidity"]) -> MetaOapg.properties.humidity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["battery"]) -> MetaOapg.properties.battery: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["acceleration"]) -> 'Acceleration': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id"], typing_extensions.Literal["time"], typing_extensions.Literal["source"], typing_extensions.Literal["temperature"], typing_extensions.Literal["pressure"], typing_extensions.Literal["humidity"], typing_extensions.Literal["battery"], typing_extensions.Literal["acceleration"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["time"]) -> typing.Union[MetaOapg.properties.time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["source"]) -> typing.Union[MetaOapg.properties.source, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["temperature"]) -> typing.Union[MetaOapg.properties.temperature, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pressure"]) -> typing.Union[MetaOapg.properties.pressure, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["humidity"]) -> typing.Union[MetaOapg.properties.humidity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["battery"]) -> typing.Union[MetaOapg.properties.battery, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["acceleration"]) -> typing.Union['Acceleration', schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id"], typing_extensions.Literal["time"], typing_extensions.Literal["source"], typing_extensions.Literal["temperature"], typing_extensions.Literal["pressure"], typing_extensions.Literal["humidity"], typing_extensions.Literal["battery"], typing_extensions.Literal["acceleration"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        time: typing.Union[MetaOapg.properties.time, str, datetime, schemas.Unset] = schemas.unset,
        source: typing.Union[MetaOapg.properties.source, str, schemas.Unset] = schemas.unset,
        temperature: typing.Union[MetaOapg.properties.temperature, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        pressure: typing.Union[MetaOapg.properties.pressure, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        humidity: typing.Union[MetaOapg.properties.humidity, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        battery: typing.Union[MetaOapg.properties.battery, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        acceleration: typing.Union['Acceleration', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'Measurement':
        return super().__new__(
            cls,
            *args,
            id=id,
            time=time,
            source=source,
            temperature=temperature,
            pressure=pressure,
            humidity=humidity,
            battery=battery,
            acceleration=acceleration,
            _configuration=_configuration,
        )

from measurements_api_client.model.acceleration import Acceleration
